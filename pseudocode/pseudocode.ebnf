program={({func}|{op})}
attr=ID"<--"ID|CONST|ar_op.
add=ID|CONST"+"ID|CONST{"+"ID|CONST }.
sub=ID|CONST"-"ID|CONST{"-"ID|CONST }.
div=ID|CONST"div"ID|CONST{"div"ID|CONST }|"["rdiv"{"/"rdiv}]".
mod=ID|CONST"mod"ID|CONST{"-"ID|CONST }.
rdiv=ID|CONST"/"ID|CONST{"/"ID|CONST }.
mul=ID|CONST"*"ID|CONST{"*"ID|CONST }.
ar_op=add|mul|sub|div|mod|rdiv.
op=ar_op|if|func_call|for.
ret_op="returneaza " ID|CONST|ar_op|func_call.
cond_op=ID|CONST ("<"|">"|"<="|">="|"=") ID|CONST|ar_op.
cond=cond_op|"Adevarat"|"Fals".
if="daca" cond{" si "|" sau "cond} "atunci" op{(";"|"\n")op}[(";"|"\n") ret_op] ["altfel" op{(";"|"\n")op}[(";"|"\n") ret_op] "sf_daca".
f_params=ID{","ID}.
a_params=ID|CONST{","ID|CONST}.
func="subprogram " ID "("{f_param}")" op{(";"|"\n")op} [ret_op]"sf_subprogram".
func_call=ID"("{a_params}")".
for="pentru" ID<-ID|CONST,ID|CONST,[CONST] "executa" op{(";"|"\n")op} "sf_pentru".
while="cat_timp" cond{" si "|" sau "cond} "executa" op{(";"|"\n")op} "sf_cat_timp".